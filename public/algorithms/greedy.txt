PROCEDURE checkSyntax(data)
    lines <- SEPARER PAR \n data
    POUR line DANS lines FAIRE
        SI line NE RESPECT PAS regex ALORS
            RENVOIE FAUX
        FIN SI
    FIN POUR

    RENVOIE VRAI
FIN


PROCEDURE importSeatsData(data)
    SI checkSyntax(data) ALORS
        arr <- []
        lines <- SEPARER PAR \n data

        POUR line DANS lines FAIRE
            lineData <- line SEPARER PAR ; line
            newSeat <- {
                name <- lineData[0]
                x <- lineData[1]
                y <- lineData[2]
            }
            newSeat AJOUTER A arr
        FIN POUR

        RENVOIE arr
    FIN SI

    RENVOIE []
FIN


PROCEDURE isInRange(a, b, d)
    RENVOIE RACINE_CARRE(PUISSANCE(a.x - b.x, 2) + PUISSANCE(a.y - b.y, 2)) < d
FIN


PROCEDURE greedy(seats, distance)
    seatsTaken <- []
    POUR i ALLANT DE 0 A TAILLE(seats) FAIRE
        noSeatsTakenInRange <- VRAI

        POUR j DANS seatsTaken FAIRE
            SI isInRange(seats[i], seats[j], distance) ALORS
                noSeatsInRange <- FAUX
                SORTIR POUR
            FIN SI
        FIN POUR

        SI noSeatsTakenInRange ALORS
            i AJOUTER A seatsTaken
        FIN SI
    FIN POUR

    RENVOIE seatsTaken
FIN


PROCEDURE main(dataString, distance)
    formattedString <- importSeatsData(dataString)
    timeStart <- TEMPS_MAINTENANT
    result <- greedy(formattedString, distance)
    RENVOIE {
        time <- TEMPS_MAINTENANT - timeStart
        result <- result
        numberOfOccupiedSeats <- TAILLE(result)
    }
FIN
